//{{{b

//}}}e
#line 5 "LeftRightDigitsGame2.cpp"
#include <string>
#include <vector>
#include <map>
#include <algorithm>
#include <set>
#include <cctype>
#include <sstream>
#include <bitset>
#include <iostream>

using namespace std;

#define REP(i,n) for(int i=0;i<(int)n;++i)

class LeftRightDigitsGame2 {
	public:
//{{{b
 
// BEGIN CUT HERE
	public:
	void run_test(int Case) { if ((Case == -1) || (Case == 0)) test_case_0(); if ((Case == -1) || (Case == 1)) test_case_1(); if ((Case == -1) || (Case == 2)) test_case_2(); if ((Case == -1) || (Case == 3)) test_case_3(); if ((Case == -1) || (Case == 4)) test_case_4(); }
	private:
	template <typename T> string print_array(const vector<T> &V) { ostringstream os; os << "{ "; for (typename vector<T>::const_iterator iter = V.begin(); iter != V.end(); ++iter) os << '\"' << *iter << "\","; os << " }"; return os.str(); }
	void verify_case(int Case, const string &Expected, const string &Received) { cerr << "Test Case #" << Case << "..."; if (Expected == Received) cerr << "PASSED" << endl; else { cerr << "FAILED" << endl; cerr << "\tExpected: \"" << Expected << '\"' << endl; cerr << "\tReceived: \"" << Received << '\"' << endl; } }
	void test_case_0() { string Arg0 = "565"; string Arg1 = "556"; string Arg2 = "556"; verify_case(0, Arg2, minNumber(Arg0, Arg1)); }
	void test_case_1() { string Arg0 = "565"; string Arg1 = "566"; string Arg2 = "655"; verify_case(1, Arg2, minNumber(Arg0, Arg1)); }
	void test_case_2() { string Arg0 = "565"; string Arg1 = "656"; string Arg2 = ""; verify_case(2, Arg2, minNumber(Arg0, Arg1)); }
	void test_case_3() { string Arg0 = "9876543210"; string Arg1 = "5565565565"; string Arg2 = "5678943210"; verify_case(3, Arg2, minNumber(Arg0, Arg1)); }
	void test_case_4() { string Arg0 = "8016352"; string Arg1 = "1000000"; string Arg2 = "1086352"; verify_case(4, Arg2, minNumber(Arg0, Arg1)); }

// END CUT HERE

//}}}e


	string minNumber(string digits, string lowerBound) ;
};

string LeftRightDigitsGame2::minNumber(string digits, string lowerBound){
  map<string, int> A;
  vector<string> B;
  int n = digits.size();
  A[""]=0;
  B.push_back("");
  REP(i,n) {
    for(int j=1;j<=n-i;++j) {
      string s = lowerBound.substr(i,j);
      if (A.find(s)==A.end()) {
        A[s]=B.size();
        B.push_back(s);
      }
    }
  }

  set<int> pref;
  string rval;
  REP(i,n+1) pref.insert(A[lowerBound.substr(0,i)]);
  vector<string> minimal;
  minimal.push_back("");
  REP(i,n) {
    string a=minimal[i]+digits.substr(i,1);
    string b=digits.substr(i,1)+minimal[i];
    minimal.push_back(min(a,b));
  }
  map<int, string> M
  REP(i,n) {
    map<int,stirng> nM;
    string x = digits.substr(i,1);
    for(map<string, int>::iterator it = M.begin(); it != M.end();++it) {
      string s = x+it->first;
      REP(j,s.size()+1) {
        string z = s.substr(0,j);
        if(A.find(z) != A.end()) {
          a = A[z];
          if(nM[a] == "" || nM[a] >s) nM[a]=s;
        }
      }
      M = nM;

    }
  }
  return rval;
}
//{{{b
int main() {
  LeftRightDigitsGame2 ___test;
  ___test.run_test(-1);
}
//}}}e
