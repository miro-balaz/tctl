//{{{b

//}}}e
#line 5 "BallRemoval.cpp"
#include <string>
#include <vector>
#include <map>
#include <algorithm>
#include <set>
#include <cctype>
#include <sstream>
#include <bitset>
#include <iostream>

using namespace std;

#define REP(i,n) for(int i=0;i<(int)n;++i)

class BallRemoval {
	public:
//{{{b
 
// BEGIN CUT HERE
	public:
	void run_test(int Case) { if ((Case == -1) || (Case == 0)) test_case_0(); if ((Case == -1) || (Case == 1)) test_case_1(); if ((Case == -1) || (Case == 2)) test_case_2(); if ((Case == -1) || (Case == 3)) test_case_3(); if ((Case == -1) || (Case == 4)) test_case_4(); }
	private:
	template <typename T> string print_array(const vector<T> &V) { ostringstream os; os << "{ "; for (typename vector<T>::const_iterator iter = V.begin(); iter != V.end(); ++iter) os << '\"' << *iter << "\","; os << " }"; return os.str(); }
	void verify_case(int Case, const string &Expected, const string &Received) { cerr << "Test Case #" << Case << "..."; if (Expected == Received) cerr << "PASSED" << endl; else { cerr << "FAILED" << endl; cerr << "\tExpected: \"" << Expected << '\"' << endl; cerr << "\tReceived: \"" << Received << '\"' << endl; } }
	void test_case_0() { string Arg0 = "<<>"; string Arg1 = "..o"; verify_case(0, Arg1, canLeave(Arg0)); }
	void test_case_1() { string Arg0 = ">>><<"; string Arg1 = "o...o"; verify_case(1, Arg1, canLeave(Arg0)); }
	void test_case_2() { string Arg0 = "<<><<" ; string Arg1 = "....o"; verify_case(2, Arg1, canLeave(Arg0)); }
	void test_case_3() { string Arg0 = "<><<><>"; string Arg1 = "o.....o"; verify_case(3, Arg1, canLeave(Arg0)); }
	void test_case_4() { string Arg0 = ">>><<<>>>>><<<>"; string Arg1 = "o.....o.o.....o"; verify_case(4, Arg1, canLeave(Arg0)); }

// END CUT HERE

//}}}e


	string canLeave(string label) ;
};

string BallRemoval::canLeave(string label){
   
}
//{{{b
int main() {
  BallRemoval ___test;
  ___test.run_test(-1);
}
//}}}e
