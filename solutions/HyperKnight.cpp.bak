//{{{b

//}}}e
#line 5 "HyperKnight.cpp"
#include <string>
#include <vector>
#include <map>
#include <algorithm>
#include <set>
#include <cctype>
#include <sstream>
#include <bitset>
#include <iostream>

using namespace std;

#define REP(i,n) for(int i=0;i<(int)n;++i)

class HyperKnight {
	public:
//{{{b
 
// BEGIN CUT HERE
	public:
	void run_test(int Case) { if ((Case == -1) || (Case == 0)) test_case_0(); if ((Case == -1) || (Case == 1)) test_case_1(); if ((Case == -1) || (Case == 2)) test_case_2(); if ((Case == -1) || (Case == 3)) test_case_3(); if ((Case == -1) || (Case == 4)) test_case_4(); if ((Case == -1) || (Case == 5)) test_case_5(); }
	private:
	template <typename T> string print_array(const vector<T> &V) { ostringstream os; os << "{ "; for (typename vector<T>::const_iterator iter = V.begin(); iter != V.end(); ++iter) os << '\"' << *iter << "\","; os << " }"; return os.str(); }
	void verify_case(int Case, const long long &Expected, const long long &Received) { cerr << "Test Case #" << Case << "..."; if (Expected == Received) cerr << "PASSED" << endl; else { cerr << "FAILED" << endl; cerr << "\tExpected: \"" << Expected << '\"' << endl; cerr << "\tReceived: \"" << Received << '\"' << endl; } }
	void test_case_0() { int Arg0 = 2; int Arg1 = 1; int Arg2 = 8; int Arg3 = 8; int Arg4 = 4; long long Arg5 = 20LL; verify_case(0, Arg5, countCells(Arg0, Arg1, Arg2, Arg3, Arg4)); }
	void test_case_1() { int Arg0 = 3; int Arg1 = 2; int Arg2 = 8; int Arg3 = 8; int Arg4 = 2; long long Arg5 = 16LL; verify_case(1, Arg5, countCells(Arg0, Arg1, Arg2, Arg3, Arg4)); }
	void test_case_2() { int Arg0 = 1; int Arg1 = 3; int Arg2 = 7; int Arg3 = 11; int Arg4 = 0; long long Arg5 = 0LL; verify_case(2, Arg5, countCells(Arg0, Arg1, Arg2, Arg3, Arg4)); }
	void test_case_3() { int Arg0 = 3; int Arg1 = 2; int Arg2 = 10; int Arg3 = 20; int Arg4 = 8; long long Arg5 = 56LL; verify_case(3, Arg5, countCells(Arg0, Arg1, Arg2, Arg3, Arg4)); }
	void test_case_4() { int Arg0 = 1; int Arg1 = 4; int Arg2 = 100; int Arg3 = 10; int Arg4 = 6; long long Arg5 = 564LL; verify_case(4, Arg5, countCells(Arg0, Arg1, Arg2, Arg3, Arg4)); }
	void test_case_5() { int Arg0 = 2; int Arg1 = 3; int Arg2 = 1000000000; int Arg3 = 1000000000; int Arg4 = 8; long long Arg5 = 999999988000000036LL; verify_case(5, Arg5, countCells(Arg0, Arg1, Arg2, Arg3, Arg4)); }

// END CUT HERE

//}}}e


	long long countCells(int a, int b, int numRows, int numColumns, int k) ;
};
typedef long long int num;

void u_in(num &a, num &l, num &u, num L,  num U) {
  if(a > 0) {
    u = min(u, U-a);
  } else {
    l = max(l, L-a);
  }
}

void u_out(num &a, num &l, num &u, num L,  num U) {
  if(a > 0) {
    l = max(l, U - a + 1);
  } else {
    u = min(u, L - a - 1);
  }
}

long long HyperKnight::countCells(int A, int B, int Y, int X, int k){
  num dx[8] = {A, -A, A, -A, B, -B, B, -B};
  num dy[8] = {B, B, -B, -B, A, A, -A, -A};
  num r[9] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
  REP(s, 1<<8) {
    num x0 = 0,x1 = X-1;
    num y0 = 0,y1 = Y-1;
    int cnt = 0;
    REP(i,8) if(s&(1<<i)) cnt++;
    if(cnt==4) {
      cout<<"SET:";
      REP(i,8) if(s & (1<<i)) {
        cout<<"("<<dx[i]<<","<<dy[i]<<")";
      }
      cout<<endl;
    }
    REP(i,8) {
      num x=dx[i];
      num  y= dy[i];
      if(cnt==4) {
        cout<<x0<<x1<<y0<<y1<<":"<<x<<" "<<y<<" = ";
      }
      if(s & (1<<i)){
       // cnt++;
        u_in(x,x0,x1,0, X-1);
        u_in(y,y0,y1,0, Y-1);
      } else {
        u_out(x,x0,x1,0, X-1);
        u_out(y,y0,y1,0, Y-1);

      }
      if(cnt==4) {
        cout<<x0<<x1<<y0<<y1<<endl;
      }
    }
    if(x0<=x1 && y0<=y1) r[cnt]+=(x1-x0+1)*(y1-y0+1);


  }

  return r[k];
}
//{{{b
int main() {
  HyperKnight ___test;
  ___test.run_test(0);
}
//}}}e
